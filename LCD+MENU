#include <LiquidCrystal.h>
#define LCD_LIGHT_PIN A1
boolean buttonState = 0;
const int buttonPin = 8;

// inicializuje lcd s definicí připojení na piny.
// MojeLCD1(RS,Enable, D4, D5, D6, D7)

LiquidCrystal lcd(7,6,5,4,3,2); 


// usually the rotary encoders three pins have the ground pin in the middle
enum PinAssignments {
  encoderPinA = 11,   // right (labeled DT on our decoder, yellow wire)
  encoderPinB = 10,   // left (labeled CLK on our decoder, green wire)
  clearButton = 12,    // switch (labeled SW on our decoder, orange wire)
  // connect the +5v and gnd appropriately
};

//volatile unsigned int encoderPos = 0;  // a counter for the dial
float encoderPos = 0;  // a counter for the dial

//unsigned int lastReportedPos = 1;   // change management
float lastReportedPos = 1;   // change managemen
float settemp;
int Setup = 0;
static boolean rotating=false;      // debounce management

//Casování programu
int n = 100;
unsigned long mycounter = 0;

// interrupt service routine vars
boolean A_set = false;              
boolean B_set = false;


void setup() {
  lcd.begin(16, 2); //inicializace displeje

  // Set the button pin as an input.
  pinMode(buttonPin, INPUT);

  // Set the LCD display backlight pin as an output.
  pinMode(LCD_LIGHT_PIN, OUTPUT);

  // Turn off the LCD backlight.
  digitalWrite(LCD_LIGHT_PIN, LOW);

  pinMode(encoderPinA, INPUT_PULLUP); // new method of enabling pullups
  pinMode(encoderPinB, INPUT_PULLUP); 
  pinMode(clearButton, INPUT_PULLUP);
  // turn on pullup resistors (old method)
  //digitalWrite(encoderPinA, HIGH);
  // digitalWrite(encoderPinB, HIGH);
  // digitalWrite(clearButton, HIGH);

  // encoder pin on interrupt 0 (pin 2)        vpravo + SW
  attachInterrupt(0, doEncoderA, CHANGE);
  // encoder pin on interrupt 1 (pin 3)         vlevo - SWW
  attachInterrupt(1, doEncoderB, CHANGE);

  Serial.begin(9600);  // output
}

// MENU setup = ano1 ne0        podmínka pro zaplé vyplé menu 
  if (digitalRead(clearButton) == LOW && Setup == 0 )  {        //klik SW
    Serial.println("SW klik ON");
    Setup = 1;
    delay (750);
  }
  if (digitalRead(clearButton) == LOW && Setup == 1 )  {        //klik SW
    Serial.println("SW klik OFF");
    Setup = 0;                                                  // ukončení nastavení zapíše settemp
    settemp = lastReportedPos;
    delay (750);
  }
  if (Setup == 1){       //když je zaplý setup ano1 
    rotating = true;  // reset the debouncer
    if (encoderPos > 50 ){
      //    encoderPos = 0;
      lastReportedPos = 49;             //nepustí pod TsetMAX      koncák
    }
    if (encoderPos < -20 ){
      //    encoderPos = 0;
      lastReportedPos = -19;             //nepustí pod TsetMIN      koncák
    }
    else
    {
      if (lastReportedPos != encoderPos && encoderPos<50 && encoderPos>-19 ) {   //když se změní pozice a zároveň je v intervalu Tmin Tma
        Serial.print("Index:");                                                   // vypíše do konzole a přepíše poslední
        Serial.println(encoderPos, DEC);                        //pozici do aktuální
        Serial.println(lastReportedPos);
        lastReportedPos = encoderPos;
      }
    lcd.clear();
    lcd.setCursor(0, 0);
    lcd.print("nastav teplotu:");
    lcd.setCursor(6, 1);
    lcd.println(lastReportedPos);
    }
  }
 // buttonState = digitalRead(buttonPin);         //načte tlačítko podsvícení a rozsvítí
  if (digitalRead(buttonPin) == 0)               //LCD backlight ON OFF
  {
    digitalWrite(LCD_LIGHT_PIN, LOW);
  }
  if (digitalRead(buttonPin) == 1)
  {
    digitalWrite(LCD_LIGHT_PIN, HIGH);
  }

  if (Setup == 0){        //pokud je setup vyplý tak se vypisuje nějakej text na LCD
    lcd.clear();                        ///
    lcd.setCursor(0, 0);                //  /T1   T3    Tset             S
    lcd.print("T1");                    ///
                                        //  /T2   Hu    Tset-T1          S
    lcd.setCursor(0, 1);                ///
    lcd.print("T2");
    lcd.setCursor(5, 0);
    lcd.print("T3");

    lcd.setCursor(5, 0);
    lcd.print("RH");
    lcd.setCursor(10, 0);                 // není to celý chyběj čidla
    lcd.print("ST");

    lcd.setCursor(10, 1);
    lcd.print("rozdil");

    lcd.setCursor(15, 1);
    lcd.print("");

    lcd.setCursor(15, 0);
    lcd.print("");
  }






  delay(1000);  

}






// Interrupt on A changing state    změna stavu kroutítka
void doEncoderA(){
  // debounce
  if ( rotating ) delay (1);  // wait a little until the bouncing is done

  // Test transition, did things really change? 
  if( digitalRead(encoderPinA) != A_set ) {  // debounce once more
    A_set = !A_set;

    // adjust counter + if A leads B
    if ( A_set && !B_set && encoderPos<50 ) 
      encoderPos += .2;

    rotating = false;  // no more debouncing until loop() hits again
  }
}

// Interrupt on B changing state, same as A above
void doEncoderB(){
  if ( rotating ) delay (1);
  if( digitalRead(encoderPinB) != B_set ) {
    B_set = !B_set;
    //  adjust counter - 1 if B leads A
    if( B_set && !A_set  && encoderPos>-20 ) 
      encoderPos -= .2;

    rotating = false;
  }
}









